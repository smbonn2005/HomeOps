---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  TALHELPER_SECRET_FILE: "talsecret.sops.yaml"
  TALHELPER_CONFIG_FILE: "talconfig.yaml"

env:
  TALOSCONFIG: "talosconfig"

tasks:

  bootstrap:
    desc: Bootstrap Talos
    summary: |
      Args:
        cluster: Cluster to run command against (required)
    prompt: Bootstrap Talos on the '{{.cluster}}' cluster ... continue?
    dir: "{{.KUBERNETES_DIR}}/{{.cluster}}//bootstrap/talos/"
    cmds:
      - task: bootstrap-apply
        vars: &vars
          cluster: "{{.cluster}}"
      - task: bootstrap-etcd
        vars: *vars
      - task: fetch-kubeconfig
        vars: *vars
      - task: bootstrap-apps
        vars: *vars
      - talosctl health --server=false --context {{.cluster}}
    requires:
      vars: ["cluster"]

  bootstrap-apply:
    desc: Apply the Talos config on a node
    dir: "{{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/"
    cmd: talhelper gencommand apply --extra-flags=--insecure | bash
    requires:
      vars: ["cluster"]
    preconditions:
      - { msg: "Argument (cluster) is required", sh: "test -n {{.cluster}}" }
      - { msg: "Missing talhelper config file", sh: "test -f {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/{{.TALHELPER_CONFIG_FILE}}" }
      
  bootstrap-etcd:
    desc: Bootstrap Etcd
    cmd: until talosctl --context {{.cluster}} --nodes {{.controller}} bootstrap; do sleep 10; done
    vars:
      controller:
        sh: talosctl --context {{.cluster}} config info --output json | jq --raw-output '.endpoints[0]'
    requires:
      vars: ["cluster"]
    preconditions:
      - test -f {{.KUBERNETES_DIR}}/{{.cluster}}/talosconfig
      - talosctl --context {{.cluster}} config info >/dev/null 2>&1

  fetch-kubeconfig:
    desc: Fetch kubeconfig from Talos controllers
    cmd: |
      talosctl --context {{.cluster}} kubeconfig --nodes {{.controller}} \
          --force --force-context-name {{.cluster}} {{.KUBERNETES_DIR}}/{{.cluster}}
    vars:
      controller:
        sh: talosctl --context {{.cluster}} config info --output json | jq --raw-output '.endpoints[0]'
    requires:
      vars: ["cluster"]
    preconditions:
      - test -f {{.KUBERNETES_DIR}}/{{.cluster}}/talosconfig
      - talosctl --context {{.cluster}} config info >/dev/null 2>&1

  bootstrap-apps:
    desc: Bootstrap core apps needed for Talos
    cmds:
      - until kubectl --context {{.cluster}} wait --for=condition=Ready=False nodes --all --timeout=10m; do sleep 10; done
      - helmfile --quiet --kube-context {{.cluster}} --file {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/apps/helmfile.yaml apply --skip-diff-on-install --suppress-diff
      - until kubectl --context {{.cluster}} wait --for=condition=Ready nodes --all --timeout=10m; do sleep 10; done
    requires:
      vars: ["cluster"]
    preconditions:
      - test -f {{.KUBERNETES_DIR}}/{{.cluster}}/talosconfig
      - talosctl --context {{.cluster}} config info >/dev/null 2>&1
      - test -f {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/apps/helmfile.yaml

  gensecret:
    desc: Generate the Talos secrets
    dir: "{{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/"
    cmds:
      - talhelper gensecret > {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/{{.TALHELPER_SECRET_FILE}}
      - task: :sops:.encrypt-file
        vars:
          file: "{{.TALHELPER_SECRET_FILE}}"
    requires:
      vars: ["cluster"]
    preconditions:
      - { msg: "Argument (cluster) is required", sh: "test -n {{.cluster}}" }
      - { msg: "Missing talhelper config file", sh: "test -f {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/{{.TALHELPER_CONFIG_FILE}}" }
    status:
      - test -f "{{.TALHELPER_SECRET_FILE}}"

  genconfig:
    desc: Generate the Talos configs
    dir: "{{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/"
    cmd: talhelper genconfig -s {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/{{.TALHELPER_SECRET_FILE}}
    requires:
      vars: ["cluster"]
    preconditions:
      - { msg: "Argument (cluster) is required", sh: "test -n {{.cluster}}" }
      - { msg: "Missing talhelper config file", sh: "test -f {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/{{.TALHELPER_CONFIG_FILE}}" }
      - { msg: "Missing talhelper secret file", sh: "test -f {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/{{.TALHELPER_SECRET_FILE}}" }



  # bootstrap-install:
  #   desc: Install the Talos cluster
  #   dir: "{{.TALOS_DIR}}"
  #   cmds:
  #     - echo "Installing Talos... ignore the errors and be patient"
  #     - until talhelper gencommand bootstrap | bash; do sleep 10; done
  #     - sleep 10
  #   preconditions:
  #     - { msg: "Missing talhelper config file", sh: "test -f {{.TALHELPER_CONFIG_FILE}}" }

  # bootstrap-apps:
  #   desc: Bootstrap core apps needed for Talos
  #   cmds:
  #     - until kubectl wait --for=condition=Ready=False nodes --all --timeout=10m; do sleep 10; done
  #     - helmfile --quiet --file {{.TALOS_DIR}}/apps/helmfile.yaml apply --skip-diff-on-install --suppress-diff
  #     - until kubectl wait --for=condition=Ready nodes --all --timeout=10m; do sleep 10; done
  #   preconditions:
  #     - test -f {{.TALOS_DIR}}/clusterconfig/talosconfig
  #     - talosctl config info >/dev/null 2>&1
  #     - test -f {{.TALOS_DIR}}/apps/helmfile.yaml

  # upgrade-talos:
  #   desc: Upgrade talos on a node
  #   cmd: talosctl --nodes {{.node}} upgrade --image {{.image}} --preserve=true --reboot-mode=default
  #   requires:
  #     vars: ["node", "image"]
  #   preconditions:
  #     - { msg: "Node not found", sh: "talosctl --nodes {{.node}} get machineconfig" }

  # upgrade-k8s:
  #   desc: Upgrade k8s on a node
  #   cmd: talosctl --nodes {{.node}} upgrade-k8s --to {{.to}}
  #   requires:
  #     vars: ["node", "to"]
  #   preconditions:
  #     - { msg: "Node not found", sh: "talosctl --nodes {{.node}} get machineconfig" }

  # fetch-kubeconfig:
  #   desc: Fetch kubeconfig from Talos controllers
  #   cmd: |
  #     talosctl kubeconfig --nodes {{.controller}} --force 
  #   vars:
  #     controller:
  #       sh: talosctl config info --output json | jq --raw-output '.endpoints[0]'
  #   preconditions:
  #     - test -f {{.TALOS_DIR}}/clusterconfig/talosconfig
  #     - talosctl config info >/dev/null 2>&1

  soft-nuke:
    desc: Resets nodes back to maintenance mode so you can re-deploy again straight after
    prompt: This will destroy your cluster and reset the nodes back to maintenance mode... continue?
    dir: "{{.TALOS_DIR}}"
    cmd: talhelper gencommand reset --extra-flags "--reboot --system-labels-to-wipe STATE --system-labels-to-wipe EPHEMERAL --graceful=false --wait=false" | bash

  hard-nuke:
    desc: Resets nodes back completely and reboots them
    prompt: This will destroy your cluster and reset the nodes... continue?
    dir: "{{.TALOS_DIR}}"
    cmd: talhelper gencommand reset --extra-flags "--reboot --graceful=false --wait=false" | bash
