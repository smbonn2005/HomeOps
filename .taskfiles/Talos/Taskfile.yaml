---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  TALOS_DIR: "{{.KUBERNETES_DIR}}/bootstrap/talos"
  TALHELPER_SECRET_FILE: "{{.TALOS_DIR}}/talsecret.sops.yaml"
  TALHELPER_CONFIG_FILE: "{{.TALOS_DIR}}/talconfig.yaml"

env:
  TALOSCONFIG: "{{.TALOS_DIR}}/clusterconfig/talosconfig"

tasks:

  bootstrap:
    desc: Bootstrap Talos
    dir: "{{.TALOS_DIR}}"
    prompt: Bootstrap Talos on the cluster ... continue?
    cmds:
      # - task: bootstrap-gensecret
      # - task: bootstrap-genconfig
      # - task: bootstrap-apply
      # - task: bootstrap-install
      - task: bootstrap-etcd
      - task: fetch-kubeconfig
      - task: bootstrap-apps
      - talosctl health --server=false

  bootstrap-etcd:
    desc: Bootstrap Etcd
    cmd: until talosctl --nodes {{.controller}} bootstrap; do sleep 10; done
    vars:
      controller:
        sh: talosctl config info --output json | jq --raw-output '.endpoints[0]'
    preconditions:
      - test -f {{.TALOS_DIR}}/clusterconfig/talosconfig
      - talosctl config info >/dev/null 2>&1

  bootstrap-gensecret:
    desc: Generate the Talos secrets
    dir: "{{.TALOS_DIR}}"
    cmds:
      - talhelper gensecret > {{.TALHELPER_SECRET_FILE}}
      - task: :sops:.encrypt-file
        vars:
          file: "{{.TALHELPER_SECRET_FILE}}"
    preconditions:
      - { msg: "Missing talhelper config file", sh: "test -f {{.TALHELPER_CONFIG_FILE}}" }
    status:
      - test -f "{{.TALHELPER_SECRET_FILE}}"

  bootstrap-genconfig:
    desc: Generate the Talos configs
    dir: "{{.TALOS_DIR}}"
    cmd: talhelper genconfig -s talhelper.sops.yaml # remove after genconfig if completely new config
    preconditions:
      - { msg: "Missing talhelper config file", sh: "test -f {{.TALHELPER_CONFIG_FILE}}" }

  bootstrap-apply:
    desc: Apply the Talos config on a node
    dir: "{{.TALOS_DIR}}"
    cmd: talhelper gencommand apply --extra-flags=--insecure | bash
    preconditions:
      - { msg: "Missing talhelper config file", sh: "test -f {{.TALHELPER_CONFIG_FILE}}" }

  bootstrap-install:
    desc: Install the Talos cluster
    dir: "{{.TALOS_DIR}}"
    cmds:
      - echo "Installing Talos... ignore the errors and be patient"
      - until talhelper gencommand bootstrap | bash; do sleep 10; done
      - sleep 10
    preconditions:
      - { msg: "Missing talhelper config file", sh: "test -f {{.TALHELPER_CONFIG_FILE}}" }

  bootstrap-apps:
    desc: Bootstrap core apps needed for Talos
    cmds:
      - until kubectl wait --for=condition=Ready=False nodes --all --timeout=10m; do sleep 10; done
      - helmfile --quiet --file {{.TALOS_DIR}}/apps/helmfile.yaml apply --skip-diff-on-install --suppress-diff
      - until kubectl wait --for=condition=Ready nodes --all --timeout=10m; do sleep 10; done
    preconditions:
      - test -f {{.TALOS_DIR}}/clusterconfig/talosconfig
      - talosctl config info >/dev/null 2>&1
      - test -f {{.TALOS_DIR}}/apps/helmfile.yaml

  upgrade-talos:
    desc: Upgrade talos on a node
    cmd: talosctl --nodes {{.node}} upgrade --image {{.image}} --preserve=true --reboot-mode=default
    requires:
      vars: ["node", "image"]
    preconditions:
      - { msg: "Node not found", sh: "talosctl --nodes {{.node}} get machineconfig" }

  upgrade-k8s:
    desc: Upgrade k8s on a node
    cmd: talosctl --nodes {{.node}} upgrade-k8s --to {{.to}}
    requires:
      vars: ["node", "to"]
    preconditions:
      - { msg: "Node not found", sh: "talosctl --nodes {{.node}} get machineconfig" }

  fetch-kubeconfig:
    desc: Fetch kubeconfig from Talos controllers
    cmd: |
      talosctl kubeconfig --nodes {{.controller}} --force 
    vars:
      controller:
        sh: talosctl config info --output json | jq --raw-output '.endpoints[0]'
    preconditions:
      - test -f {{.TALOS_DIR}}/clusterconfig/talosconfig
      - talosctl config info >/dev/null 2>&1

  soft-nuke:
    desc: Resets nodes back to maintenance mode so you can re-deploy again straight after
    prompt: This will destroy your cluster and reset the nodes back to maintenance mode... continue?
    dir: "{{.TALOS_DIR}}"
    cmd: talhelper gencommand reset --extra-flags "--reboot --system-labels-to-wipe STATE --system-labels-to-wipe EPHEMERAL --graceful=false --wait=false" | bash

  hard-nuke:
    desc: Resets nodes back completely and reboots them
    prompt: This will destroy your cluster and reset the nodes... continue?
    dir: "{{.TALOS_DIR}}"
    cmd: talhelper gencommand reset --extra-flags "--reboot --graceful=false --wait=false" | bash
